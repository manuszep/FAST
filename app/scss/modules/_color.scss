/*-------------------------------------------------------*\
    #FAST Color

    @depends on
        - FAST-Toolkit
\*-------------------------------------------------------*/

/*
 *  Provide colors tools and handling classes
 */

$FAST-color-import: true !default;

$FAST-color-list: map-get($FAST-data-color, list) !default;

/* Functions.
   ===================================================== */

// Returns a color code by name
@function fastColorGet($name, $list: $FAST-color-list) {
   @return map-get($list, unquote($name));
}

// Provide light or dark color to get an optimal contrast against a background color
@function fastColorContrast($color, $dark: fastColorGet($FAST-text-color-dark), $light: fastColorGet($FAST-text-color-light), $threshold: $FAST-color-contrast-threshold) {
   @return if(lightness($color) < $threshold, $light, $dark);
}

// Lighten a color with a maximum of $FAST-color-lightness-cap (%) lightness
@function fastColorSafeLighten($color, $amount, $cap: $FAST-color-lightness-cap) {
   $new-color: lighten($color, $amount);

   @if (lightness($new-color) > $cap) {
      @return hsl(hue($color), saturation($color), $cap);
   }

   @return $new-color;
}

// Darken a color with a minimum of $FAST-color-darkness-cap (%) lightness
@function fastColorSafeDarken($color, $amount, $cap: $FAST-color-darkness-cap) {
   $new-color: darken($color, $amount);

   @if (lightness($new-color) < $cap) {
      @return hsl(hue($color), saturation($color), $cap);
   }

   @return $new-color;
}

// Sets the lightness of a color without altering other properties
@function fastColorLightness($color, $lightness) {
   @return hsl(hue($color), saturation($color), $lightness);
}


/* Mixins.
   ===================================================== */

@mixin fast-background-color ($color, $dark: fastColorGet($FAST-text-color-dark), $light: fastColorGet($FAST-text-color-light), $threshold: $FAST-color-contrast-threshold) {
   background-color: $color;
   color: fastColorContrast($color, $dark, $light, $threshold);
}

@mixin fast-background-anchor-color($color) {
   a {
      color: fastColorContrast($color, fastColorGet($FAST-anchor-color), fastColorGet($FAST-anchor-color-rev));

      &:hover {
         color: fastColorContrast($color, fastColorGet($FAST-anchor-hover-color), fastColorGet($FAST-anchor-hover-color-rev));
      }
   }
}


/* Placeholders.
   ===================================================== */


/* Styles.
   ===================================================== */
@if $FAST-color-import {
   @each $name, $color in $FAST-color-list {
      .bg-#{$name} {
         @include fast-background-color($color);
      }

      .color-#{$name} {
         color: $color;
      }
   }
}
