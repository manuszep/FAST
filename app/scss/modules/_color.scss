/*-------------------------------------------------------*\
    #FAST Color

    @depends on
        - FAST-Toolkit
\*-------------------------------------------------------*/

/*
 *  Provide colors tools and handling classes
 */

$FAST-color-import: true !default;

/* Functions.
   ===================================================== */

// Returns a color code by name
@function fast-color-get($name, $list: $FAST-color-list) {
   @return nth(fast-get-list-value-by-name($list, $name), 2);
}

// Provide light or dark color to get an optimal contrast against a background color
@function fast-color-contrast($color, $dark: $FAST-color-text-dark, $light: $FAST-color-text-light, $threshold: $FAST-color-contrast-threshold) {
   @return if(lightness($color) < $threshold, $light, $dark)
}

// Lighten a color with a maximum of $FAST-color-lightness-cap (%) lightness
@function fast-color-safe-lighten($color, $amount) {
   $new-color: lighten($color, $amount);

   @if (lightness($new-color) > $FAST-color-lightness-cap) {
      @return hsl(hue($color), saturation($color), $FAST-color-lightness-cap);
   }

   @return $new-color;
}

// Darken a color with a minimum of $FAST-color-darkness-cap (%) lightness
@function fast-color-safe-darken($color, $amount) {
   $new-color: darken($color, $amount);

   @if (lightness($new-color) < $FAST-color-darkness-cap) {
      @return hsl(hue($color), saturation($color), $FAST-color-darkness-cap);
   }

   @return $new-color;
}

// Sets the lightness of a color without altering other properties
@function fast-color-lightness($color, $lightness) {
   @return hsl(hue($color), saturation($color), $lightness);
}


/* Mixins.
   ===================================================== */

@mixin fast-background-color ($color) {
   background-color: $color;
   color: fast-color-contrast($color);
}


/* Placeholders.
   ===================================================== */


/* Styles.
   ===================================================== */
@if $FAST-color-import {
   @for $i from 1 through length($FAST-color-list) {
      $item: nth($FAST-color-list, $i);
      $name: nth($item, 1);
      $color: nth($item, 2);

      .bg-#{$name} {
         @include fast-background-color($color);
      }

      .color-#{$name} {
         color: $color;
      }
   }

   .split-bg {
      background: transparent;
      background: linear-gradient(to right,  #ffffff 0%,#ffffff 50%,#f5f7fa 50%,#f5f7fa 100%);
   }

   @for $i from 1 through length($FAST-breakpoints-columns) {
      /* Start of Breakpoints loop */
      $bp-columns: nth($FAST-breakpoints-columns, $i);
      $name: nth($bp-columns, 1);
      $columns-count: nth($bp-columns, 2);
      $limit-query: true;

      // If this is the last media query, we don't want a max-width
      @if $i == length($FAST-breakpoints-columns) {
         $limit-query: false;
      }

      @include fast-mq($name, $limit-query) {
         .#{$name}-split-bg {
            background: transparent;
            background: linear-gradient(to right,  #ffffff 0%,#ffffff 50%,#f5f7fa 50%,#f5f7fa 100%);
         }
      }
   }
}
