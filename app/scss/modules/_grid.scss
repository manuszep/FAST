/*-------------------------------------------------------*\
    #FAST Grid

    @depends on
        - FAST-Toolkit
\*-------------------------------------------------------*/

/*
 * This defines the grid system with columns, rows and repsonsive tools
 */

$FAST-grid-import: true !default;


/* Functions.
   ===================================================== */
@function fastGridColClass($prefix, $number) {
    $num: fastSpellNumber($number);

    @if $FAST-grid-use-words {
        @if $prefix == false {
            $selector: '.#{$num}, .c#{$number}';
        } @else {
            $selector: '.#{$prefix}-#{$num}, .#{$prefix}-#{$number}';
        }
    } @else {
        @if $prefix == false {
            $selector: '.c#{$number}';
        } @else {
            $selector: '.#{$prefix}-#{$number}';
        }
    }

    @return $selector;
}

/* Mixins.
   ===================================================== */

@mixin fast-grid-columns-styles($prefix: false) {
    /* Start of fast-grid-columns-styles */
    $prefix: if($prefix == false, '', '#{$prefix}-');

    @for $i from 1 through $FAST-max-columns {
        .#{$prefix}order#{$i} {
            order: $i
        }

        .#{$prefix}order-#{$i} {
            order: -$i
        }
    }

    .#{$prefix}start {
        justify-content: flex-start;
        text-align: start;
    }

    .#{$prefix}center {
        justify-content: center;
        text-align: center;
    }

    .#{$prefix}end {
        justify-content: flex-end;
        text-align: end;
    }

    .#{$prefix}top {
        align-items: flex-start;
    }

    .#{$prefix}middle {
        align-items: center;
    }

    .#{$prefix}bottom {
        align-items: flex-end;
    }

    .#{$prefix}around {
        justify-content: space-around;
    }

    .#{$prefix}between {
        justify-content: space-between;
    }

    .row.#{$prefix}reverse {
        flex-direction: row-reverse;
    }

    .col.#{$prefix}reverse {
        flex-direction: column-reverse;
    }
    /* End of fast-grid-columns-styles */
}

/**
 *  This mixin applies styles for a specific breakpoint only (prefixed).
 *  It applies width and offsets.
 */
@mixin fast-grid-columns($prefix, $max-columns) {
    /* Start of fast-grid-columns */
    $one-column-width: (100% / $max-columns);

    @for $i from 1 through $max-columns {
        $selector: fastGridColClass($prefix, $i);

        // Setting width of columns
        #{$selector} {
            flex-basis: ($one-column-width * $i);
            max-width: ($one-column-width * $i);
        }

        // Setting Offsets of columns except for max-columns (we don't want to push a column outside the grid)
        @if $i < $max-columns {
            @if $prefix == false {
                $selector: fastGridColClass('offset', $i);
            } @else {
                $selector: fastGridColClass('#{$prefix}-offset', $i);
            }

            #{$selector} {
                margin-left: ($one-column-width * $i);
            }
        }
    }
    /* End of fast-grid-columns */
}

/**
 *  Set sizes for all the columns without prefixes, based on the ($vol-count) available columns.
 *  [1] - We want to redefine every column class name unprefixed.
 *        So we loop on the max-columns.
 *  [2] - When a column number is above the current available columns, we store it for later
 *  [3] - Now that all the exceding columns are grouped, we flatten them as a selector and set the rule to 100%
 */
@mixin fast-grid-default-columns($col-count, $col-max) {
    /* Start of fast-grid-default-columns */
    $maxed-columns: (); // Store the selectors that will get a 100% width

    @for $i from 1 through $col-max { // [1]
        $selector: fastGridColClass(false, $i);

        @if ($i < $col-count) { // As long as we are not a the media query max column count, it is smaller than 100%
            $w: ((100% / $col-count) * $i);

            #{$selector} {
                flex-basis: $w;
                max-width: $w;
            }
        } @else { // Now the width is @ 100%. We collect the selectors for later use
            $tmp: $maxed-columns;
            $maxed-columns: append($maxed-columns, '#{$selector}'); // [2]
        }
    }

    #{fastListJoin($maxed-columns, ',')} { // [3]
        flex-basis: 100%;
        max-width: 100%;
    }
    /* End of fast-grid-default-columns */
}

@mixin fast-grid-content-spacing {
    padding-left: ($FAST-gutter / 2);
    padding-right: ($FAST-gutter / 2);
}

@mixin fast-grid-content-spacing-remove {
    padding-left: 0;
    padding-right: 0;
}

@mixin fast-grid-container-spacing {
    margin-left: -($FAST-gutter / 2);
    margin-right: -($FAST-gutter / 2);
}


/* Placeholders.
   ===================================================== */
%col-spacing {
    @include fast-grid-content-spacing;
}

/* Styles.
   ===================================================== */
@if $FAST-grid-import {
    .wrapper, h1 {
        @include fast-grid-content-spacing;
    }

    .wrapper h1 {
        @include fast-grid-content-spacing-remove;
    }

    .row {
        @include fast-grid-container-spacing;
        display: flex;
        flex: 0 1 auto;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .col {
        @include fast-grid-content-spacing;
        flex: 1 1 auto;
    }

    .column {
        display: flex;
        flex-direction: column;
    }

    @include fast-grid-columns-styles();

    /**
     *  Generate columns styles for each breakpoint declared in $FAST-breakpoints-columns
     *  [1] - Get the media query data that matches the current breakpoint name and check that it exists ([1b])
     *  [2] - If this is the last media query and $to-infinity is true, we don't want a max-width
     */
    @for $i from 1 through length($FAST-breakpoints-columns) {
        /* Start of Breakpoints loop */
        $item: nth($FAST-breakpoints-columns, $i);
        $name: nth($item, 1);
        $columns-count: nth($item, 2);
        $bp: map-get($FAST-breakpoints, $name); // [1]

        @if $bp != null { // [1b]
            $limit-query: if($i == length($FAST-breakpoints-columns), false, true);

            // Start the media query
            @include fast-mq($name, $limit-query) {
                // Generate the generic columns names (without media query prefix)
                @include fast-grid-default-columns($columns-count, $FAST-max-columns);

                // Generate the prefixed columns names
                @include fast-grid-columns($name, $columns-count);

                @include fast-grid-columns-styles($name);
            }
        }
        /* End of Breakpoints loop */
    }
}
