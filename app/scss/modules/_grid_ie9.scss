/**
 *  Tested on windows 7 - IE9 (see snapshots)
 *  Tested on windows 7 - IE8
 *  https://saucelabs.com/jobs/b0331c80fc434cbea8309028b12903c1/0002screenshot.png?auth=334ff499fb9c3594d7ed8bc29461fcc5
 *  https://saucelabs.com/jobs/b0331c80fc434cbea8309028b12903c1/0003screenshot.png?auth=334ff499fb9c3594d7ed8bc29461fcc5
 *  https://saucelabs.com/jobs/b0331c80fc434cbea8309028b12903c1/0004screenshot.png?auth=334ff499fb9c3594d7ed8bc29461fcc5
 */
$FAST-grid-import: false;

@import "grid";

/**
 *  TODO: Slightly refactor the general mixins
 *  - Add a parameter for legacy styles
 *  - Add conditions to output modern or legacy styles where needed.
 */
@mixin fast-grid-columns-styles($prefix: false) {
    @if $prefix == false {
        $prefix: '';
    } @else {
        $prefix: '#{$prefix}-';
    }

    .#{$prefix}start {
        text-align: left;
    }

    .#{$prefix}center {
        text-align: center;
    }

    .#{$prefix}end {
        text-align: right;
    }

    .#{$prefix}top > * {
        vertical-align: top;
    }

    .#{$prefix}middle > * {
        vertical-align: middle;
    }

    .#{$prefix}bottom > * {
        vertical-align: bottom;
    }

    .#{$prefix}around, .#{$prefix}between {
        text-align: justify;
    }
}

@mixin fast-grid-columns($prefix, $max-columns, $use-words: false) {
    $one-column-width: (100% / $max-columns);

    @for $i from 1 through $max-columns {
        $num: fast-number-as-word($i);
        $selector: fast-grid-col-class($prefix, $i);

        #{$selector} {
            width: ($one-column-width * $i);
        }

        @if $i < $max-columns {
            @if $prefix == false {
                $selector: fast-grid-col-class('offset', $i);
            } @else {
                $selector: fast-grid-col-class('#{$prefix}-offset', $i);
            }

            #{$selector} {
                margin-left: ($one-column-width * $i);
            }
        }
    }
}

/**
 *  Set sizes for all the columns without prefixes, based on the ($vol-count) available columns.
 *  [1] - We want to redefine every column class name unprefixed.
 *        So we loop on the max-columns.
 *  [2] - When a column number is above the current available columns, we store it for later
 *  [3] - Now that all the exceding columns are grouped, we flatten them as a selector and set the rule to 100%
 */
@mixin fast-grid-default-columns($col-count, $col-max, $use-words: false) {
    $maxed-columns: ();

    @for $i from 1 through $col-max { // [1]
        $num: fast-number-as-word($i);
        $selector: fast-grid-col-class(false, $i);

        @if ($i < $col-count) {
            $w: ((100% / $col-count) * $i);

            #{$selector} {
                width: $w;
            }
        } @else {
            $tmp: $maxed-columns;
            $maxed-columns: append($maxed-columns, '#{$selector}'); // [2]
        }
    }

    @if length($maxed-columns) > 0 {
        #{fast-list-join($maxed-columns, ',')} { // [3]
            width: 100%;
        }
    }
}

.row {
    font-size: 0;
}

.col {
    display: inline-block;
    font-size: 16px;
    width: 100% / $FAST-max-columns;
}

.row.reverse {
    direction: rtl;
}

.col.reverse {
    direction: rtl;
}

/* Include the unprefixed grid styles */
@include fast-grid-columns-styles();
@include fast-grid-default-columns($FAST-max-columns, $FAST-max-columns);

/* Find last grid breakpoint values */
$last-grid-breakpoint: fast-get-last-list-value($FAST-breakpoints-columns);
$name: nth($last-grid-breakpoint, 1);
$columns-count: nth($last-grid-breakpoint, 2);

/* Apply prefixed styles only for the last breakpoint because we don't want responsiveness in IE9 ! */
@include fast-grid-columns($name, $columns-count);
@include fast-grid-columns-styles($name);
