/*-------------------------------------------------------*\
    #FAST Toolkit
\*-------------------------------------------------------*/

/*
 *  Provide a set of tools for other modules
 */

/* Functions.
   ===================================================== */

/**
 *  Strip units from value
 */
@function fastStripUnit($number) {
    @return $number / ($number * 0 + 1);
}

/**
 *  Fetch nested keys
 *
 *  @param {Map} $map - Map
 *  @param {Arglist} $keys - Keys to fetch
 *  @return {*}
 */
@function fastMapDeepGet($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }

    @return $map;
}

/**
 *  Convert a size in pixels to em's
 *
 *  @param {px} $target - Desired size in px
 *  @param {px} $context - Size of the context in px
 *  @return {em}
 */
@function fastEm($target, $context: $FAST-base-size) {
    @return (($target / $context) * 1em);
}

/**
 *  Convert an integer to the corresponding word
 *
 *  @param {int} $number - The number to convert in word
 *  @return {string}
 */
@function fastSpellNumber($number) {
    $w: "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "twenty-one", "twenty-two", "twenty-three", "twenty-four", "twenty-five", "twenty-six", "twenty-seven", "twenty-eight", "twenty-nine", "thirty", "thirty-one", "thirty-two", "thirty-three", "thirty-four", "thirty-five", "thirty-six";

    @return nth($w, $number);
}

/**
 *  Build a media query based on a minimum and maximum size
 *
 *  @param {px || false} $min - The minimum size of the media query
 *  @param {px || false} $max - The maximum size of the media query
 *  @return {string} - Media query string
 */
@function fastBuildMq($min: false, $max: false) {
    @if $min == false and $max == false {
        @return 'only screen';
    }

    $part1: "";
    $middle: "";
    $part2: "";

    @if $min {
        $part1: "(min-width: #{$min})";
    }

    @if $max {
        $part2: "(max-width: #{$max})";
    }

    @if $min and $max {
        $middle: " and ";
    }

    $current_mq: $part1 + $middle + $part2;

    @return 'only screen and #{$current_mq}';
}

/**
 *  Returns the first item of a list
 *
 *  @param {list} $list
 *  @return {*}
 */
@function fastGetFirstListValue($list) {
    @return nth($list, 1);
}

/**
 *  Returns the last item of a list
 *
 *  @param {list} $list
 *  @return {*}
 */
@function fastGetLastListValue($list) {
    @return nth($list, length($list));
}

/**
 *  Finds the last occurence of a value in a list and returns it's index
 *  Sass @for loops canâ€™t decrement.
 *  Thus, we have to use a ugly workaround to make the loop increment on negative value,
 *  then use the absolute value of $i. Not cool but it works.
 *
 *  @param {list} $list
 *  @param {*} $value - Value to search in list
 *  @return {int || null}
 */
@function fastGetLastListIndex($list, $value) {
    @for $i from length($list)*-1 through -1 {
        @if nth($list, abs($i)) == $value {
            @return abs($i);
        }
    }

    @return null;
}

/**
 *  Finds the first occurence of a value in a list and returns it's index
 *  Sass has a built-in function for it but we provide a wrapper to match the fastGetLastListIndex
 *
 *  @param {list} $list
 *  @param {*} $value - Value to search in list
 *  @return {* || null}
 */
@function fastGetFirstListIndex($list, $value) {
    @return index($list, $value)
}

/**
 *  Add a value at the beginning of a list
 *
 *  @param {list} $list
 *  @param {*} $value - Value to add in list
 *  @return {list}
 */
@function fastListPrepend($list, $value) {
    @return join($value, $list);
}

/**
 *  Converts a list into a string with the given separator
 *
 *  @param {list} $list
 *  @param {string} $glue - Separator for list elements
 *  @param {bool} $is-nested - Don't use. It's for the recursive function
 *  @return {string}
 */
@function fastListJoin($list, $glue: '', $is-nested: false) {
    $result: null;

    @if length($list) == 0 {
        @return "";
    }
    @for $i from 1 through length($list) {
        $e: nth($list, $i);

        @if type-of($e) == list {
            $result: $result#{to-string($e, $glue, true)};
        }

        @else {
            $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
        }
    }

    @return $result;
}

@function fast-top-shadow($depth) {
    $primary-offset: nth(.5 1.5 3 10 14 19, $depth) * 1px;
    $blur: nth(.5 1.5 3 10 14 19, $depth) * 4px;
    $color: rgba(black, nth(.08 .12 .16 .19 .25 .30, $depth));

    @return 0 $primary-offset $blur $color;
}

@function fast-bottom-shadow($depth) {
    $primary-offset: nth(.5 1.5 3 6 10 15, $depth) * 1px;
    $blur: nth(.5 1 3 3 5 6, $depth) * 4px;
    $color: rgba(black, nth(.12 .24 .23 .23 .22 .22, $depth));

    @return 0 $primary-offset $blur $color;
}

@function fast-padding-for-height($height, $line-height) {
    @return ($height - $line-height) / 2;
}


/* Mixins.
   ===================================================== */

/*  fast-rem
 *  Sets a rule in pixels (as a fallback) and in rem (for modern browsers)
 */
@mixin fast-rem($property: font-size, $values: $FAST-base-size) {
    $px : ();
    $rem: ();

    @each $value in $values {

        @if $value == 0 or $value == auto {
            $px : append($px , $value);
            $rem: append($rem, $value);
        }

        @else {
            $unit: unit($value);

            @if $unit == "px" {
                $px : append($px,  $value);
                $rem: append($rem, ($value / $FAST-base-size) * 1rem);
            }

            @if $unit == "rem" {
                $px : append($px,  ($value * $FAST-base-size));
                $rem: append($rem, $value);
            }
        }
    }

    // If the two lists are the same, we output only one (ex: margin-top: 0)
    @if $px == $rem {
        #{$property}: $px;
    } @else {
        #{$property}: $px;
        #{$property}: $rem;
    }
}

/*  fast-build-mq
 *  Declares a media query with a min and max width and includes the content
 */
@mixin fast-build-mq($min: false, $max: false) {
    $mq: fastBuildMq($min, $max);

    @media #{$mq} {
        @content;
    }
}

/*  fast-mq
 *  Declares a media query based on a name and includes the content
 *  The second argument allows to scope a min-width and above.
 */
@mixin fast-mq($name, $use_max: false) {
    @each $bp-name, $sizes in $FAST-breakpoints {
        @if $bp-name == $name {
            $min: map-get($sizes, "min");
            $max: if($use_max == false, false, map-get($sizes, "max"));

            @include fast-build-mq($min, $max) {
                @content;
            }
        }
    }
}

/*  fast-mq-retina
 *  Declares a media query for retina devices
 */
@mixin fast-mq-retina {
    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx) {
        @content;
    }
}

/*  fast-mq-print
 *  Declares a media query for print devices
 */
@mixin fast-mq-print {
    @media print {
        @content;
    }
}

@mixin fast-rotate($degrees, $rotation) {
    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=#{$rotation});
    transform: rotate($degrees);
}

@mixin fast-flip($horiz, $vert, $rotation) {
    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=#{$rotation});
    transform: scale($horiz, $vert);
}

@mixin fast-shadow($depth) {
    @if $depth < 1 {
        box-shadow: none;
    } @else if $depth > 6 {
        @warn "Invalid $depth `#{$depth}` for mixin `card`.";
    } @else {
        box-shadow: fast-bottom-shadow($depth), fast-top-shadow($depth);
    }
}

@mixin fast-padding($v-mult: 1, $h-mult: 1) {
    @include fast-rem(padding, ($FAST-line-height * $v-mult) ($FAST-gutter * $h-mult));
}

@mixin fast-padding-v($mult) {
    @include fast-rem(padding-top, ($FAST-line-height * $mult));
    @include fast-rem(padding-bottom, ($FAST-line-height * $mult));
}

@mixin fast-padding-h($mult) {
    @include fast-rem(padding-left, ($FAST-gutter * $mult));
    @include fast-rem(padding-right, ($FAST-gutter * $mult));
}

/* Animations.
   ===================================================== */

@keyframes fast-spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(359deg);
    }
}
